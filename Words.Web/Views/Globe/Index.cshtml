@model Words.Web.Controllers.GlobeController.ViewModel
@{
    Layout = null;
}
<!doctype html>
<head>
    <style>
        body {
            margin: 0;
        }
    </style>

    <script src="//unpkg.com/d3"></script>
    <script src="//unpkg.com/three"></script>
    <script src="//unpkg.com/globe.gl"></script>
    <script>
        window.Data = '@ViewBag.data';
        window.GlobeImage = '@Model.GlobeImage';
        window.BumpImage = '@Model.BumpImage';
    </script>
</head>

<body>
    <h1>Visitors</h1>
    <div id="globeViz"></div>

    <script>
        Pearl();

        function Pearl() {
            const weightColor = d3.scaleSequentialSqrt(d3.interpolateYlOrRd)
                .domain([0, 100]);
            const date = new Date();
            const timeZoneOffset = date.getTimezoneOffset() || 0;
            const timeZoneMaxOffset = 60 * 12;
            const rotationOffset_lng = -180 * (timeZoneOffset / timeZoneMaxOffset);
            const world = Globe()
                // .height(800)
                // .width(800)
                .globeImageUrl(`/Content/images/${window.GlobeImage}`)
                .bumpImageUrl(`/Content/images/${window.BumpImage}`)
                .backgroundImageUrl('/Content/images/night-sky.png')
                .pointOfView({ lat: 40, lng: rotationOffset_lng, altitude: 1.4 }, 2000)
                .showAtmosphere(true)
                .hexBinResolution(4)
                .hexBinMerge(true)
                .hexBinPointWeight('pop')
                .hexTopColor(d => weightColor(d.sumWeight))
                .hexSideColor(d => weightColor(d.sumWeight))
                .hexAltitude(d => Math.log10(d.sumWeight) / 30)
                .enablePointerInteraction(false)
                (document.getElementById('globeViz'));
            world.controls().autoRotate = true;
            world.controls().autoRotateSpeed = 0.1;

            // custom globe material
            const globeMaterial = world.globeMaterial();
            globeMaterial.bumpScale = 50;
            new THREE.TextureLoader().load('/Content/images/earth-water.png', texture => {
                globeMaterial.specularMap = texture;
                globeMaterial.specular = new THREE.Color('grey');
                globeMaterial.shininess = 15;
            });

            let binPoints = d3.csvParse(window.Data, ({ lat, lng, pop }) => ({ lat: +lat, lng: +lng, pop: +pop }))
            world.hexBinPointsData(binPoints);
        }
    </script>
</body>
